<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage />
	<TimerPackage />
	<AliasPackage>
		<Alias isActive="yes" isFolder="no">
			<name>help</name>
			<script>pecho("\nYour vision blurs as a sudden wealth of information becomes available with a touch you can gain access to:\n")
pechoLink("&lt;:"..tecSettings.helpHighlightColor.."&gt;Newbie guide", 
[[openUrl("http://eternal-city.wikidot.com/newbie-guides")]], 
"Guide explaining this games basic interworkings", true)
echo("        ") --There is a bug with cechoLink tabs cause issues

pechoLink("&lt;:"..tecSettings.helpHighlightColor.."&gt;Character creation guide", 
[[openUrl("http://eternal-city.wikidot.com/character-generator")]], 
"Character creation tutorial", true)
echo("\n\n")

pechoLink("&lt;:"..tecSettings.helpHighlightColor.."&gt;Help Anything", 
[[printCmdLine("help ")]], 
"wiki search", true)
pecho(" Type help followed by anything. "
	.."You will be given a clickable link to search for your question on TEC's wiki.\n\n")

pechoLink("&lt;:"..tecSettings.helpHighlightColor.."&gt;World maps", 
[[openUrl("http://eternal-city.wikidot.com/maps")]], 
"Maps of all major areas in this game", true)
echo("          ") --There is a bug with cechoLink tabs cause issues

pechoLink("&lt;:"..tecSettings.helpHighlightColor.."&gt;Hunting grounds", 
[[openUrl("http://eternal-city.wikidot.com/hunting-grounds")]], 
"Maps and explanation of hunting areas", true)
echo("\n\n")

pechoLink("&lt;:"..tecSettings.helpHighlightColor.."&gt;Commands", 
[[openUrl("http://eternal-city.wikidot.com/commands")]], 
"Full list of game commands", true)
echo("            ")

pechoLink("&lt;:"..tecSettings.helpHighlightColor.."&gt;Commune with mortals", 
[[openUrl("https://discord.gg/fevBA8j")]], 
"TEC Discord", true)
echo("\n\n")

pechoLink("&lt;:"..tecSettings.helpHighlightColor.."&gt;Full respitory of this worlds interworkings", 
[[openUrl("http://eternal-city.wikidot.com/")]], 
"wiki site home", true)
echo("\n\n")

pechoLink("&lt;:"..tecSettings.helpHighlightColor.."&gt;help client", 
[[tecClientFullHelp(false, "main")]], 
"wiki site home", true)

pecho("\nWith some effort you are able focus your mind and clear your vision back to reality.\n\n")</script>
			<command></command>
			<packageName></packageName>
			<regex>^help$</regex>
			<Alias isActive="yes" isFolder="no">
				<name>Help (.w+)</name>
				<script>if matches[2] == "client" then

else
  --The user tried to get help for something we have not created
  --a help for. So we will search the wiki site for them.
  echo("\nTry as you may you can not remember. Would you like to search the great beyond for\n")
  
  --Turns just the background of the word(s) blue "&lt;color:color&gt;"
  --For font than background colors
  --command is the global for what is in command line.
  --string.sub pulls text from a string. In this case what starts AT
  --Line 6 than after.
  cechoLink("&lt;:"..tecSettings.helpHighlightColor.."&gt;"..string.sub(command, 6), 
  
  --if clicked, opens a link to
  [[openUrl("http://eternal-city.wikidot.com/search:site/q/"..string.sub(command, 6))]], 
  
  --Tool tip that appears when moused over.
  --True if I recall is needed for a bug fix.
  "Search the wiki for: "..string.sub(command, 6), true)
  echo("\n\n")
end --if matches[2] == "client" else</script>
				<command></command>
				<packageName></packageName>
				<regex>^help (.*)</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>help client</name>
				<script>--run the client help command. It is a function so it can be clicked.
tecClientFullHelp(false, "main")</script>
				<command></command>
				<packageName></packageName>
				<regex>^help client$</regex>
			</Alias>
		</Alias>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>Display</name>
			<script>UIManagerHelp() --help for client display</script>
			<command></command>
			<packageName></packageName>
			<regex>^display$</regex>
			<Alias isActive="yes" isFolder="no">
				<name>display save</name>
				<script>--saves the gui loadWindowLayout
UIManagerFileSave(true)</script>
				<command></command>
				<packageName></packageName>
				<regex>^display save</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>display load</name>
				<script>--loads the display from file.
UIManagerFileLoad(true)</script>
				<command></command>
				<packageName></packageName>
				<regex>^display load$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>display reset</name>
				<script>--Sets guiframe back to default settings
--these settings can be found in scripts - tec client scripts - community scripts - guiframe
UIManagerReset(true)</script>
				<command></command>
				<packageName></packageName>
				<regex>^display reset</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>dispay update autowrap</name>
				<script>--set main window word wrap size.
--Function is is scripts - GUI - GUI Functions
setMainWindowAutoWrap()
echo("\nScreen wrap adjusted\n")

--No need to grant users access. This works automatically.</script>
				<command></command>
				<packageName></packageName>
				<regex>^display update autowrap</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>display clear</name>
				<script>--clears the main screen.
UIManagerClearMainWindow()</script>
				<command></command>
				<packageName></packageName>
				<regex>^display clear$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>display clear characters</name>
				<script>--in tecFunctions - autocheck - room character checks
clearRoomCharacterWindow()
--I don't think players need access to this as it autoruns</script>
				<command></command>
				<packageName></packageName>
				<regex>^display clear characters$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>display refresh settings</name>
				<script>tecRefreshSettingsWindow() --reloads the settings window.</script>
				<command></command>
				<packageName></packageName>
				<regex>^display refresh settings$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>display scrollbars enable</name>
				<script>tecSetScrollBars(true) --enables scroll bars throughout this project.</script>
				<command></command>
				<packageName></packageName>
				<regex>^display scrollbars enable$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>display scrollbars disable</name>
				<script>tecSetScrollBars(false) --Disable scroll bars throughout this project.</script>
				<command></command>
				<packageName></packageName>
				<regex>^display scrollbars disable$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>display remove geyserObject</name>
				<script>--echo("captured: "..matches[2]..".\n")
UIManagerShowWindow(matches[2], false, true) --remove geyser object from UI manager.
</script>
				<command></command>
				<packageName></packageName>
				<regex>^display remove (.*)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>display add geyserObject</name>
				<script>--echo("captured: "..matches[2]..".\n")
UIManagerShowWindow(matches[2], true, true) --add geyser object from UI manager.</script>
				<command></command>
				<packageName></packageName>
				<regex>^display add (.*)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>display window enable</name>
				<script>--echo("captured: "..matches[2]..".\n")
--arguments are windowname, enable, displayToScreen
UIManagerEnableWindow(matches[2], true, true)</script>
				<command></command>
				<packageName></packageName>
				<regex>^display window enable (.*)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>display window disable</name>
				<script>--echo("captured: "..matches[2]..".\n")
--arguments are windowname, enable, displayToScreen
UIManagerEnableWindow(matches[2], false, true)</script>
				<command></command>
				<packageName></packageName>
				<regex>^display window disable (.*)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>display window list</name>
				<script>--echo("captured: "..matches[2]..".\n")
--arguments are windowname, enable, displayToScreen
UIManagerEnableWindow("list", true, true)
UIManagerEnableWindow("list", false, true)</script>
				<command></command>
				<packageName></packageName>
				<regex>^display window list$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>display manager name</name>
				<script>--echo("captured: "..matches[2]..".\n")
SetUIManager(matches[2], true) --set Parthia's UI Manager</script>
				<command></command>
				<packageName></packageName>
				<regex>^display manager (.*)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>display layout name</name>
				<script>--echo("captured: "..matches[2]..".\n")
UIManagerSetTheme(matches[2], true)</script>
				<command></command>
				<packageName></packageName>
				<regex>^display layout (\w+)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>display side disable name</name>
				<script>--echo("captured: "..matches[2]..".\n")
UIManagerEnableSide(matches[2],false,true)</script>
				<command></command>
				<packageName></packageName>
				<regex>^display side disable (.*)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>display side enable name</name>
				<script>--echo("captured: "..matches[2]..".\n")
UIManagerEnableSide(matches[2],true,true)</script>
				<command></command>
				<packageName></packageName>
				<regex>^display side enable (.*)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>display side list</name>
				<script>--echo("captured: "..matches[2]..".\n")
UIManagerEnableSide("list",true,true)
UIManagerEnableSide("list",false,true)</script>
				<command></command>
				<packageName></packageName>
				<regex>^display side list$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>display help</name>
				<script>UIManagerHelp() --help for client display</script>
				<command></command>
				<packageName></packageName>
				<regex>^display help$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>display images</name>
				<script>imagesCmdFound = false --used to tell aliase if incorrect cmd was found
--check if imageType is correct
--tecSettings.images is in the variables script, stores default settings and directories for imageTypes
for imageTableName, imageTable in pairs(tecSettings.images) do
  if matches[2]:starts(imageTable.name) then --if a correct command was found
    imagesCmdFound = true --good images command found
    local imagesFileName = matches[2]:gsub(imageTable.name.." ", "") --return everything after image type argument
    debugToDisplay("aliase display images catch, imagesFileName "..imagesFileName)
    parthiaSetImages(imageTable.name, imagesFileName, true) --run the command. If file name is wrong a help message will display
  end --if matches[2]:starts(imageTable.name)
end --for pairs(tecSettings.images)

if not imagesCmdFound then --if the command does not match an image type name
  parthiaSetImages("list", "list", true) --display help command to screen
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^display images\s?(.*)$</regex>
			</Alias>
		</AliasGroup>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>parthia</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<Alias isActive="yes" isFolder="no">
				<name>parthia load</name>
				<script>--Load settings from file.

--True echos to the user if it was successfull
tecFileLoadSettings(true)</script>
				<command></command>
				<packageName></packageName>
				<regex>^parthia load$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>parthia save all</name>
				<script>--save display and client settings.
tecClientSaveAll(true)</script>
				<command></command>
				<packageName></packageName>
				<regex>^parthia save all$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>parthia save</name>
				<script>--save client settings
--not display settings.
tecFileSaveSettings(true)</script>
				<command></command>
				<packageName></packageName>
				<regex>^parthia save$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>parthia</name>
				<script>--display tecClientHelp to screen
tecClientHelp()</script>
				<command></command>
				<packageName></packageName>
				<regex>^parthia$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>parthia reset</name>
				<script>--reloads user profile. Can't complete this right now.
--resetProfile()

--reset tec client settings to default. Not display though.
tecClientReset(true)</script>
				<command></command>
				<packageName></packageName>
				<regex>^parthia reset$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>parthia reset all</name>
				<script>tecClientResetAll(true) --resets all client settings</script>
				<command></command>
				<packageName></packageName>
				<regex>^parthia reset all$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>parthia font size #</name>
				<script>tecClientSetFontSize(tonumber(matches[2])) 
--matches[2] is the word in () in the pattern</script>
				<command></command>
				<packageName></packageName>
				<regex>^parthia font size (.*)</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>parthia tab font size #</name>
				<script>tecClientSetTabFontSize(tonumber(matches[2]))
--matches[2] is the word in () in the pattern</script>
				<command></command>
				<packageName></packageName>
				<regex>^parthia tab font size (.*)$</regex>
			</Alias>
			<Alias isActive="no" isFolder="no">
				<name>parthia update</name>
				<script>DownloadGitScripts() --Begin downloading updates</script>
				<command></command>
				<packageName></packageName>
				<regex>^parthia update$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>parthia repair</name>
				<script>--force an update installation. Intended for repair installation.
if not tecGitUpdate then --if the update engine has not been configured.
  GitUpdateconfig() --create default update engine config
end
GitUpdate.repairInstall = true --tell update engine a repair install is needed
GitUpdate.installationInProgress = false --notifies update engine if update is running.
DownloadGitReleaseJSON() --start the update process</script>
				<command></command>
				<packageName></packageName>
				<regex>^parthia repair$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>parthia update check</name>
				<script>DownloadGitReleaseJSON() --check if an update is needed.</script>
				<command></command>
				<packageName></packageName>
				<regex>^parthia update check$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>parthia beta test</name>
				<script>tecSetBetaTester() --toggle if beta updates should be received.</script>
				<command></command>
				<packageName></packageName>
				<regex>^parthia beta test$</regex>
			</Alias>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>colors</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>parthia colors</name>
					<script>tecColorWindow() --Open floating window to choose colors with.</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia colors$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia change colors</name>
					<script>tecClientChangeColors() --Help user change color scheams.</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia change colors$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia change colors commands</name>
					<script>tecClientChangeColorsList() --List commands to change display colors.</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia change colors commands$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia windows background color</name>
					<script>tecLabelBackgroundColor(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia windows background color (.*)</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia tabs background color</name>
					<script>tecTabsBackgroundColor(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia tabs background color (.*)</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia hover color</name>
					<script>tecSetMouseHoverColor(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia hover color (.*)</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia greentext color</name>
					<script>tecSetGreenTextColor(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia greentext color (.*)</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia bluetext color</name>
					<script>tecSetBlueTextColor(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia bluetext color (.*)</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia gray color</name>
					<script>tecSetGrayTextColor(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia gray color (.*)</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia purple color</name>
					<script>tecSetPurpleTextColor(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia purple color (.*)</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia text color</name>
					<script>tecSetTextColor(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia text color (.*)</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia helphighlight color</name>
					<script>tecSetHelpHighlightColor(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia helphighlight color (.*)</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia approached character color</name>
					<script>tecSettecApproachedCharacter(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia approached character color (.*)</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia not approached character color</name>
					<script>tecSettecNotApproachedCharacter(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia not approached character color (.*)</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia background color</name>
					<script>tecSetBackgroundColor(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia background (.*)</regex>
				</Alias>
			</AliasGroup>
			<Alias isActive="yes" isFolder="no">
				<name>parthia report</name>
				<script>tecReportIssues()</script>
				<command></command>
				<packageName></packageName>
				<regex>^parthia report$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>parthia version</name>
				<script>--if the update engine has not been initialized do it, to make the version number.
if not GitUpdate then GitUpdateconfig() end
cecho("Parthia version: "..GitUpdate.localVersion.."\n")</script>
				<command></command>
				<packageName></packageName>
				<regex>^parthia version$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>parthia playerdevelopment install</name>
				<script>--Installed modules set aside for player development.
--populate them with meaningfull triggers.
PlayerDev.SetEnabled(true)</script>
				<command></command>
				<packageName></packageName>
				<regex>^parthia playerdevelopment install$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>parthia playerdevelopment disable</name>
				<script>--Tell Parthia to no longer receive player development updates.
PlayerDev.SetEnabled(false)</script>
				<command></command>
				<packageName></packageName>
				<regex>^parthia playerdevelopment disable$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>parthia playerdevelopment update</name>
				<script>PlayerDev.Update(true)</script>
				<command></command>
				<packageName></packageName>
				<regex>^parthia playerdevelopment update$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>parthia playerdevelopment uninstall</name>
				<script>--Tell Parthia to no longer receive player development updates.
PlayerDev.SetPackages(false)</script>
				<command></command>
				<packageName></packageName>
				<regex>^parthia playerdevelopment uninstall$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>parthia commands</name>
				<script>parthiaCommandsHelp()</script>
				<command></command>
				<packageName></packageName>
				<regex>^parthia commands$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>parthia numpad navigation</name>
				<script>if getNumpadNaviation() then --numpad is enabled so disable it
  setNumpadNavigation(false) --tell parthia to disable num navigation
  cecho("Number pad navigation disabled.\n")
 else --numpad navigation is disabled, so enable it
  setNumpadNavigation(true) --tell parthia to enable numpad navigation
  cecho("Number pad navigation enabled.\n")
end --if getNumpadNaviation() then

dontForgetToSave() --remind the player to save their changes.</script>
				<command></command>
				<packageName></packageName>
				<regex>^parthia numpad navigation$</regex>
			</Alias>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>parthia talk</name>
				<script>--Reference https://wiki.mudlet.org/w/Manual:Text_to_Speech_Functions

parthiaTalkHelp() --display parthia talk help</script>
				<command></command>
				<packageName></packageName>
				<regex>^parthia talk$</regex>
				<Alias isActive="yes" isFolder="no">
					<name>parthia talk enable</name>
					<script>setParthiaTalk(true) --enable parthia talk
pecho("parthia talk enabled.\n")
dontForgetToSave()</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia talk enable$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia talk disable</name>
					<script>setParthiaTalk(false) --enable parthia talk
expandAlias("parthia talk clear") --stop parthia talk's current speech.
pecho("parthia talk disabled.\n")
dontForgetToSave()</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia talk disable$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia talk clear</name>
					<script>ttsClearQueue() --clear out the message queue
ttsSkip() --skip the current message so it stops reading</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia talk clear$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia talk cl</name>
					<script>expandAlias("parthia talk clear")</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia talk cl$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia talk skip</name>
					<script>ttsSkip() --skip the current message</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia talk skip$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia talk sk</name>
					<script>expandAlias("parthia talk skip")</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia talk sk$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>/pt *</name>
					<script>--create shorter version of parthia talk command
expandAlias("parthia talk "..tostring(matches[2]))
</script>
					<command></command>
					<packageName></packageName>
					<regex>^/pt (.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>/pt</name>
					<script>expandAlias("parthia talk")</script>
					<command></command>
					<packageName></packageName>
					<regex>^/pt$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia talk test</name>
					<script>ttsSpeak("Parthia talk test.")</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia talk test$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia talk voice</name>
					<script>parthiaTalkSetVoice(matches[2], true)</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia talk voice\s?(.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia talk resume</name>
					<script>ttsResume() --resume talking through tts queue
ttsSpeak(" ") --sometimes the queue stops this will unstop it</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia talk resume$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia talk pause</name>
					<script>ttsPause() --pause speech</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia talk pause$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia talk speed</name>
					<script>--set speed parthia talk speeks at, and display messages to screen
parthiaTalkSetSpeed(matches[2], true)</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia talk speed\s?(.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia talk show</name>
					<script>display(ttsGetQueue())
ttsSpeak(" ") --sometimes GetQueue stop the queue, this prevents that.</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia talk show$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia talk thoughts</name>
					<script>--Toggle state of parthia talk thoughts, and display a message to screen
parthiaTalkSetThoughts(true)</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia talk thoughts$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia talk speech</name>
					<script>--Toggle state of parthia talk speech, and display a message to screen
parthiaTalkSetSpeech(true)</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia talk speech$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia talk pitch</name>
					<script>--Set pitch of the voice parthia talk uses, displaying messages to screen
parthiaTalkSetPitch(matches[2], true)</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia talk pitch\s?(.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia talk debug</name>
					<script>local message = ttsGetCurrentLine() --collect the current message in queue
local state = ttsGetState()
if message then --if there was a message in the tts queue
  message = "parthia talk current line: "..message.."&lt;reset&gt;parthia talk state: "..state
  debugToDisplay(message)
  cecho(message.."\n") --get the current message in the ttsQueue
  ttsSkip() --skip the current message
  cecho("Debug data above, restarting parthia talk queue.\n")
  ttsSpeak("Debug data above, restarting parthia talk queue.")
else --there is no message in the tts queue
  message = "No message in the parthia talk queue."
  message = message .. " parthia talk state "..state
  debugToDisplay(message)
  cecho(message.."\n")
  ttsSpeak(message)
end --if message</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia talk debug$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia talk queue</name>
					<script>--toggle the state of the parthia talk queue, and display a message to screen.
parthiaTalkSetQueueEnabled(true)</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia talk queue$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia talk volume</name>
					<script>parthiaTalkSetVolume(matches[2], true)</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia talk volume\s?(.*)$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>parthia developer</name>
				<script>--[[
commands that would help developers only
]]--
parthiaDeveloperHelp()</script>
				<command></command>
				<packageName></packageName>
				<regex>^parthia developer$</regex>
				<Alias isActive="yes" isFolder="no">
					<name>parthia playerdata</name>
					<script>if parthiaPlayer then
  pecho("= {} is a table. and can be accessed with periods. IE parthiaPlayer.CurrentCharacter.variables, "
    .."where variables are in the {}.\nSpecial characters in strings will have a \\ before them.\n")
  pecho("parthiaPlayer = ")
  display(parthiaPlayer)
else 
  pecho("parthiaPlayer table does not exist.")
end --if parthiaPlayer</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia playerdata$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia prepare release</name>
					<script>setNumpadNavigation(true) --tell parthia to enable numpad navigation
cecho("Number pad navigation enabled.\n")

disableAlias("parthia update") --make certain update command is disabled
pecho("Update command disabled.\n")

parthiaStopScripts(true)
pecho("Automation scripts disabled.\n")</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia prepare release$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia room data</name>
					<script>if HelpDevsData.RoomTypes then
  pecho("= {} is a table. and can be accessed with periods. IE parthiaPlayer.CurrentCharacter.variables, "
    .."where variables are in the {}.\nSpecial characters in strings will have a \\ before them.\n")
  pecho("HelpDevsData.RoomTypes = ")
  display(HelpDevsData.RoomTypes)
else 
  pecho("HelpDevsData.RoomTypes table does not exist.")
end --if HelpDevsData.RoomTypes</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia room data$</regex>
					<Alias isActive="yes" isFolder="no">
						<name>parthia room data clear</name>
						<script>if HelpDevsData.RoomTypes then 
  HelpDevsData.RoomTypes = {}
  pecho("Help Developers room data cleared.\n")
  pecho("If you would like to clear this data from the Help Developers file run ")
  pechoLink("&lt;:"..tecSettings.helpHighlightColor.."&gt;parthia help developers save", 
    [[saveHelpDevs(true)]],
    "Save Help Developer data", true)
  echo("\n")
else
  tecErrorNotification("aliase parthia room data clear, RoomTypes table does not exist.")
end --if HelpDevsData.RoomTypes</script>
						<command></command>
						<packageName></packageName>
						<regex>^parthia room data clear$</regex>
					</Alias>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia character data</name>
					<script>if HelpDevsData.NPCTypes then
  pecho("= {} is a table. and can be accessed with periods. IE parthiaPlayer.CurrentCharacter.variables, "
    .."where variables are in the {}.\nSpecial characters in strings will have a \\ before them.\n")
  pecho("HelpDevsData.NPCTypes = ")
  display( HelpDevsData.NPCTypes )
else 
  pecho("HelpDevsData.NPCTypes table does not exist.")
end --if HelpDevsData.NPCTypes</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia character data$</regex>
					<Alias isActive="yes" isFolder="no">
						<name>parthia character data clear</name>
						<script>if HelpDevsData.NPCTypes then 
  HelpDevsData.NPCTypes = {}
  pecho("Help Developers character type data cleared.\n")
  pecho("If you would like to clear this data from the Help Developers file run ")
  pechoLink("&lt;:"..tecSettings.helpHighlightColor.."&gt;parthia help developers save", 
    [[saveHelpDevs(true)]],
    "Save Help Developer data", true)
  echo("\n")
else
  tecErrorNotification("aliase parthia character data clear, NPCTypes table does not exist.")
end --if HelpDevsData.NPCTypes</script>
						<command></command>
						<packageName></packageName>
						<regex>^parthia character data clear$</regex>
					</Alias>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia player combat data</name>
					<script> if HelpDevsData.Combat then
  pecho("= {} is a table. and can be accessed with periods. IE parthiaPlayer.CurrentCharacter.variables, "
    .."where variables are in the {}.\nSpecial characters in strings will have a \\ before them.\n")
  pecho("HelpDevsData.Combat = ")
  display(HelpDevsData.Combat)
else 
  pecho("HelpDevsData.Combat table does not exist.")
end --if HelpDevsData.Combat</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia player combat data$</regex>
					<Alias isActive="yes" isFolder="no">
						<name>parthia player combat data clear</name>
						<script>if HelpDevsData.Combat then 
  HelpDevsData.Combat = {}
  pecho("Help Developers player combat data cleared.\n")
  pecho("If you would like to clear this data from the Help Developers file run ")
  pechoLink("&lt;:"..tecSettings.helpHighlightColor.."&gt;parthia help developers save", 
    [[saveHelpDevs(true)]],
    "Save Help Developer data", true)
  echo("\n")
else
  tecErrorNotification("aliase parthia player combat data clear, Combat table does not exist.")
end --if HelpDevsData.Combat</script>
						<command></command>
						<packageName></packageName>
						<regex>^parthia player combat data clear$</regex>
					</Alias>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia player noncombat data</name>
					<script>--HelpDevsData.NonCombatActions
 if HelpDevsData.NonCombatActions then
  pecho("= {} is a table. and can be accessed with periods. IE parthiaPlayer.CurrentCharacter.variables, "
    .."where variables are in the {}.\nSpecial characters in strings will have a \\ before them.\n")
  pecho("HelpDevsData.NonCombatActions = ")
  display(HelpDevsData.NonCombatActions)
else 
  pecho("HelpDevsData.NonCombatActions table does not exist.")
end --if parthiaPlayer</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia player noncombat data$</regex>
					<Alias isActive="yes" isFolder="no">
						<name>parthia player noncombat data clear</name>
						<script>if HelpDevsData.Combat then 
  HelpDevsData.Combat = {}
  pecho("Help Developers player combat data cleared from memory.\n")
  pecho("If you would like to clear this data from the Help Developers file run ")
  pechoLink("&lt;:"..tecSettings.helpHighlightColor.."&gt;parthia help developers save", 
    [[saveHelpDevs(true)]],
    "Save Help Developer data", true)
  echo("\n")
else
  tecErrorNotification("aliase parthia player combat data clear, Combat table does not exist.")
end --if HelpDevsData.Combat</script>
						<command></command>
						<packageName></packageName>
						<regex>^parthia player noncombat data clear$</regex>
					</Alias>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia object data</name>
					<script>--HelpDevsData.NonCombatActions
 if HelpDevsData.ObjectTypes then
  pecho("= {} is a table. and can be accessed with periods. IE parthiaPlayer.CurrentCharacter.variables, "
    .."where variables are in the {}.\nSpecial characters in strings will have a \\ before them.\n")
  pecho("HelpDevsData.ObjectTypes = ")
  display(HelpDevsData.ObjectTypes)
else 
  pecho("HelpDevsData.ObjectTypes table does not exist.")
end --if HelpDevsData.ObjectTypes</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia object data$</regex>
					<Alias isActive="yes" isFolder="no">
						<name>parthia object data clear</name>
						<script>if HelpDevsData.ObjectTypes then 
  HelpDevsData.ObjectTypes = {}
  pecho("Help Developers object data cleared from memory.\n")
  pecho("If you would like to clear this data from the Help Developers file run ")
  pechoLink("&lt;:"..tecSettings.helpHighlightColor.."&gt;parthia help developers save", 
    [[saveHelpDevs(true)]],
    "Save Help Developer data", true)
  echo("\n")
else
  tecErrorNotification("aliase parthia object data clear, Combat table does not exist.")
end --HelpDevsData.ObjectTypes</script>
						<command></command>
						<packageName></packageName>
						<regex>^parthia object data clear$</regex>
					</Alias>
				</Alias>
			</AliasGroup>
			<Alias isActive="yes" isFolder="no">
				<name>parthia help developers</name>
				<script>if getHelpDevs() then --helpdevs is enabled so disable it
  setHelpDevs(false) --tell parthia to disable helpdevs
  pecho("Help the developers data collection is disabled.\n")
 else --helpdevs is disabled, so enable it
  setHelpDevs(true) --tell parthia to enable helpdevs
  pecho("Help the developers data collection is enabled.\n"
  .."We will not automatically save this data to file or send it to developers.\n"
  .."To save data collected by Help Developers run or click ")
  pechoLink("&lt;:"..tecSettings.helpHighlightColor.."&gt;parthia help developers save", 
    [[expandAlias("parthia help developers save")]],
    "Save Help Developers data", true)
    pecho("\n")
  sendHelpDevs() --display message to help players submit Help Developers data
end --if getNumpadNaviation() then

dontForgetToSave() --remind the player to save their changes.</script>
				<command></command>
				<packageName></packageName>
				<regex>^parthia help developers$</regex>
				<Alias isActive="yes" isFolder="no">
					<name>parthia help developers save</name>
					<script>saveHelpDevs(true)</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia help developers save$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia help developers load</name>
					<script>loadHelpDevs(true)</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia help developers load$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia help developers open</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia help developers open$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia help developers clear</name>
					<script>--clears all data collected by Help Developers
HelpDevsData = {} --table to save data with
HelpDevsData.RoomTypes = {} --room types are the short description of a room, that appears after "You arrive" when you walk into a room.
HelpDevsData.NPCTypes = {} --names of characters in TEC
HelpDevsData.Combat = {} --holds combat data
HelpDevsData.Combat.AgainstPlayer = {} --attacks directed at the player
HelpDevsData.Combat.PlayerAttacks = {} --attacks the player is using
HelpDevsData.Combat.Unsorted = {} --attacks that we do not know if the player is using or someone is using against the player
HelpDevsData.NonCombatActions = {} --hold non combat actions
HelpDevsData.NonCombatActions.Unsorted = {} --hold unsorted non combat actions
HelpDevsData.NonCombatActions.Healing = {}
HelpDevsData.NonCombatActions.Hunting = {}
HelpDevsData.NonCombatActions.Locksmithing = {}
HelpDevsData.NonCombatActions.Tailoring = {}
HelpDevsData.NonCombatActions.Outdoors = {}
HelpDevsData.NonCombatActions.Pickpocket = {}
HelpDevsData.NonCombatActions.Setups = {}
HelpDevsData.NonCombatActions.StreetSmarts = {}
pecho("Help Developers data cleared from memory. If you would like to clear the Help Developers file run ")
pechoLink("&lt;:"..tecSettings.helpHighlightColor.."&gt;parthia help developers save", 
[[saveHelpDevs(true)]],
"Save Help Developer data", true)
echo("\n")</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia help developers clear$</regex>
				</Alias>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>parthia display</name>
				<script>--Please make changes to the display alias group.
--This alias will fordward to them.
parthiaDisplayHelp = true
expandAlias("display"..matches[2])
</script>
				<command></command>
				<packageName></packageName>
				<regex>^parthia display(\s?.*)$</regex>
			</Alias>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>parthia map</name>
				<script>parthiaMap.help()</script>
				<command></command>
				<packageName></packageName>
				<regex>^parthia map$</regex>
				<Alias isActive="yes" isFolder="no">
					<name>parthia map area add</name>
					<script>parthiaMap.addArea(matches[2]) --add the new map area</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia map area add (.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia map area remove</name>
					<script>parthiaMap.removeArea(matches[2], true) --remove the area, display success or failure to screen</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia map area remove (.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia map area clear ID</name>
					<script>parthiaMap.clearAreaRooms(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia map area clear (.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia map mapping</name>
					<script>--enable or disable new map creation
parthiaMap.setMapping(true)</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia map mapping$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia map location clear</name>
					<script>parthiaMap.resetRoom() --clear the room table
parthiaMap.previousRoom = nil
pecho("Cleared room and previousRoom tables.\n")</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia map location clear$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia map enable</name>
					<script>parthiaMap.setEnabled(true, true)</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia map enable$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia map disable</name>
					<script>parthiaMap.setEnabled(false, true)</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia map disable$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia map steps go up</name>
					<script>parthiaMap.setStepsGoUp(true, true) --set steps to go up or add to z access. Display message to screen of this change.</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia map steps go up$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia map steps go down</name>
					<script>parthiaMap.setStepsGoUp(false, true) --set steps to go down or subtract from z access. Display message to screen of this change.</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia map steps go down$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia map character move</name>
					<script>parthiaMap.setCharacterLocation(matches[2], true) --move the room the player is in</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia map character move (\d+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia map character area</name>
					<script>parthiaMap.changeArea(matches[2], true) --changes the area the character is in.</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia map character area (.+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia map location check</name>
					<script>parthiaMap.checkCharacter(true)</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia map location check$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia map danger</name>
					<script>parthiaMap.setDanger(matches[2], true) --set danger level show message to screen.</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia map danger (.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia map userdata</name>
					<script>if matches[3] then --if there is a second argument
  parthiaMap.echoUserData(matches[2], matches[3])
else
  parthiaMap.echoUserData(matches[2])
end --if matches[3]</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia map userdata(?:\s+(\w+\d*))?(?:\s+(\w*\d*))?$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia map unique</name>
					<script>parthiaMap.makeRoomUnique() --verrifies current room is unique then makes it unique.
</script>
					<command></command>
					<packageName></packageName>
					<regex>parthia map unique(?:\s+((?:\w+|\d+)))?</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>/map</name>
					<script>local cmd = matches[2] or false
local arg = matches[3] or false
local arg2 = matches[4] or false

if cmd then
  if cmd == "up" then
    parthiaMap.setStepsGoUp(true, true) --set steps to go up or add to z access. Display message to screen of this change.
  elseif cmd == "down" then
    parthiaMap.setStepsGoUp(false, true) --set steps to go down or subtract from z access. Display message to screen of this change.
  elseif cmd == "move" then
    parthiaMap.setCharacterLocation(arg, true) --move the room the player is in
  elseif cmd == "areaadd" then
    parthiaMap.addArea(arg) --add the new map area
  elseif cmd == "arearemove" then
      parthiaMap.removeArea(arg, true) --remove the area, display success or failure to screen
  elseif cmd == "areaclear" then
    parthiaMap.clearAreaRooms(arg)
  elseif cmd == "area" then
    parthiaMap.changeArea(arg, true) --changes the area the character is in.
  elseif cmd == "coord" then
    pecho("Command not created yet.\n")
  elseif cmd == "danger" then
    parthiaMap.setDanger(arg, true) --set danager level for rooms being created
  elseif cmd == "unique" then
    parthiaMap.makeRoomUnique() --verrifies current room is unique then makes it unique.
  elseif cmd == "stock" then
    pecho("Command not created yet.\n")
  elseif cmd == "learn" then
    pecho("Command not created yet.\n")
  elseif cmd == "help" then
    parthiaMap.help()
  elseif cmd == "userdata" then
    if arg2 then --if there is a second argument
      parthiaMap.echoUserData(arg, arg2) --display user data if it exists
    else
      parthiaMap.echoUserData(arg) --display user data if it exists
    end --if arg2
  else
    pecho("&lt;yellow&gt;No mapping command: "..cmd.."&lt;reset&gt;\n")
  end --if cmd == elseif

else --no additional text after /map in command

  --toggle map creation
  parthiaMap.setMapping(true)

end --if cmd</script>
					<command></command>
					<packageName></packageName>
					<regex>^/map(\w+)?(?:\s+(\w+\d*))?(?:\s+(\w*\d*))?$</regex>
				</Alias>
			</AliasGroup>
			<Alias isActive="yes" isFolder="no">
				<name>parthia tips</name>
				<script>parthiaSetTips(true) --toggle the tips system, show message to screen</script>
				<command></command>
				<packageName></packageName>
				<regex>^parthia tips(\s?.*)$</regex>
			</Alias>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>parthia automation</name>
				<script>--[[
Commands that work with automation
For full details refer to Scripts\TEC Functions\Game Commands\automation
]]--</script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>parthia automation [group name], [repeat]</name>
					<script>--[[
Aliases\Parthia\parthia automation\parthia auto [group name], [repeat]
  Example:
    parthia automation slash &lt;target&gt;, 10
    Calls, Scripts\Game Commands\auto\parthiaAutomationStart(groupName, groupRepeat)
    ^parthia\s+automation\s+(.+),\s+(\d+)$

parthiaAutomationStart
  is located in Scripts\TEC Functions\Game Commands\automation\parthiaAutomationStart
    
matches[1], Entire line captured
matches[2], First item captured in a capture group ()
matches[3], second item captured in a capture group ()
]]--

-- matches[2] is the first item captured in the pattern, or the automation group name
-- matches [3] is the second item captured in the pattern, or how many times this automation group should repeat.
parthiaAutomationStart(matches[2], matches[3])</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia\s+automation\s+([a-zA-Z0-9\s+]+),\s+(\d+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia automation [group name], [position number] = [command], [trigger], [repeat on fail]</name>
					<script>--[[
Create or update an automation group.
Replacing any entry in the groups position provided.
    
]]--

--Here we are unpacking ALL 5 of the captures from the pattern above.
--Unpack format is unpack(array, element start, element end)
--Since we are not specifing an element end it unpacks until the end of the array.
--This is just like sending it {groupName, parthiaAutomationGroupPosition, command, trigger, repeatOnFail}
parthiaAutomationUpdate(unpack(matches, 2))</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia\s+automation\s+([a-zA-Z0-9\s+]+),\s+(\d+)\s+=\s+([a-zA-Z0-9\s+]+),\s+(.+)~\s+(\d+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia automation [group name], [position number] = [command], [seconds or 0], [repeat on fail], [insert]</name>
					<script>--[[
Supports creation an automation group or position while inserting into the automation group.
Not replacing an existing entry.
]]--

--Here we are unpacking ALL 6 of the captures from the pattern above.
--Unpack format is unpack(array, element start, element end)
--Since we are not specifing an element end it unpacks until the end of the array.
--This is just like sending it {groupName, parthiaAutomationGroupPosition, command, seconds, repeatOnFail, insert}
parthiaAutomationUpdate(unpack(matches, 2))</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia\s+automation\s+([a-zA-Z0-9\s+]+),\s+(\d+)\s+=\s+([a-zA-Z0-9\s+]+),\s+(.+)~\s+(\d+),\s+(\d+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia automation start</name>
					<script>-- display help message on how to start automation.
parthiaAutomationStartHelp()</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia automation start$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia automation</name>
					<script>-- parthia automation, calls the automation help function
parthiaAutomationHelp()</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia automation$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia automation update</name>
					<script>-- Show the help messages on how to update parthia's automation system.
parthiaAutomationUpdateHelp()</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia automation update$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia automation create</name>
					<script>-- Show the help messages on how to update parthia's automation system.
parthiaAutomationUpdateHelp()</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia automation create$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia automation groups</name>
					<script>parthiaAutomationShowGroups(false)</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia automation groups$</regex>
					<Alias isActive="yes" isFolder="no">
						<name>parthia automation groups [name]</name>
						<script>parthiaAutomationShowGroups(matches[2])</script>
						<command></command>
						<packageName></packageName>
						<regex>^parthia automation groups\s+([a-zA-Z0-9\s+]+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>parthia automation [name], delete [group position]</name>
						<script>--delete the automation group passed.
parthiaAutomationShowGroups(matches[2], true, matches[3])</script>
						<command></command>
						<packageName></packageName>
						<regex>^parthia automation groups\s+([a-zA-Z0-9\s+]+),\s+delete\s+(\d+)$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>parthia automation [name], delete</name>
						<script>--delete the automation group passed.
parthiaAutomationShowGroups(matches[2], true)</script>
						<command></command>
						<packageName></packageName>
						<regex>^parthia automation groups\s+([a-zA-Z0-9\s+]+),\s+delete$</regex>
					</Alias>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>parthia automation triggers</name>
					<script>parthiaAutomationTriggerHelp()</script>
					<command></command>
					<packageName></packageName>
					<regex>^parthia automation triggers$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>/auto [command]</name>
					<script>--create shorter version of parthia talk command
expandAlias("parthia automation "..tostring(matches[2]))
</script>
					<command></command>
					<packageName></packageName>
					<regex>^/auto\s+(.*)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>/auto</name>
					<script>expandAlias("parthia automation")</script>
					<command></command>
					<packageName></packageName>
					<regex>^/auto\s*$</regex>
				</Alias>
			</AliasGroup>
		</AliasGroup>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>Debug</name>
			<script>tecDebugHelp() --display help window.</script>
			<command></command>
			<packageName></packageName>
			<regex>^debug$</regex>
			<Alias isActive="yes" isFolder="no">
				<name>debug on</name>
				<script>--function in scripts - variables.
setTECDebugMode(true)</script>
				<command></command>
				<packageName></packageName>
				<regex>^debug on</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>debug off</name>
				<script>--function in scripts - variables.
setTECDebugMode(false)

--Turn off debug display also
setTECDisplayDebugMode(false)

--turn off map debug mode
setTECMapDebugMode(false)

--turn off timer debug mesages
setTECTimerDebugMode(false)

pecho("\nAll debug modes off.\n")</script>
				<command></command>
				<packageName></packageName>
				<regex>^debug off</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>debug video on</name>
				<script>--Enable debug output for display
setTECDisplayDebugMode(true)</script>
				<command></command>
				<packageName></packageName>
				<regex>^debug display on</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>debug video off</name>
				<script>--Disable output of video debug display
setTECDisplayDebugMode(false)</script>
				<command></command>
				<packageName></packageName>
				<regex>^debug display off</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>debug map on</name>
				<script>--Enable debug output for tec map
setTECMapDebugMode(true)</script>
				<command></command>
				<packageName></packageName>
				<regex>^debug map on</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>debug map off</name>
				<script>--Disable output of video debug display
setTECMapDebugMode(false)</script>
				<command></command>
				<packageName></packageName>
				<regex>^debug map off</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>debug timers on</name>
				<script>--output timers to debug window
setTECTimerDebugMode(true)</script>
				<command></command>
				<packageName></packageName>
				<regex>^debug timers on</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>debug timers off</name>
				<script>--stop outputing timers to debug window
setTECTimerDebugMode(false)</script>
				<command></command>
				<packageName></packageName>
				<regex>^debug timers off</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>debug test colors</name>
				<script>--Run a color test, function in scripts, techfunctions, debug
tecColorTest()</script>
				<command></command>
				<packageName></packageName>
				<regex>^debug test colors$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>debug report issue</name>
				<script>tecReportIssues() --help user report issues.</script>
				<command></command>
				<packageName></packageName>
				<regex>^debug report issue$</regex>
			</Alias>
		</AliasGroup>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>data collection</name>
			<script>--[[
Commands that interact with auto checks the client does.
Mostly these will be used to manually run a check for dev testing.
]]--</script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<Alias isActive="yes" isFolder="no">
				<name>Room Check</name>
				<script>--Check room for characters and fill the room character window.
runTECRoomObjectCheck()</script>
				<command></command>
				<packageName></packageName>
				<regex>^room check$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>ac .</name>
				<script>runTECRoomObjectCheck(true) --check room for characters display all to screen</script>
				<command></command>
				<packageName></packageName>
				<regex>^ac \.$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>room refresh</name>
				<script>--checks if a refresh notification is already in window displays it if needed
tecRoomCharRefreshNotification()</script>
				<command></command>
				<packageName></packageName>
				<regex>^room refresh$</regex>
			</Alias>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>stats</name>
				<script>runStatsCollection(true) --collect data from stats command showing command to screen</script>
				<command></command>
				<packageName></packageName>
				<regex>^stats$</regex>
				<Alias isActive="yes" isFolder="no">
					<name>stats hide</name>
					<script>runStatsCollection(false)</script>
					<command></command>
					<packageName></packageName>
					<regex>^stats hide$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>stat</name>
					<script>runStatsCollection(true) --collect data from stats command showing command to screen</script>
					<command></command>
					<packageName></packageName>
					<regex>^stat$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>condition</name>
				<script>runConditionCollection(true) --collect data from condition command, show command to screen</script>
				<command></command>
				<packageName></packageName>
				<regex>^condition$</regex>
				<Alias isActive="yes" isFolder="no">
					<name>condition hide</name>
					<script>runConditionCollection(false)</script>
					<command></command>
					<packageName></packageName>
					<regex>^condition hide$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>conditio</name>
					<script>runConditionCollection(true) --collect data from condition command, show command to screen</script>
					<command></command>
					<packageName></packageName>
					<regex>^conditio$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>conditi</name>
					<script>runConditionCollection(true) --collect data from condition command, show command to screen</script>
					<command></command>
					<packageName></packageName>
					<regex>^conditi$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>condit</name>
					<script>runConditionCollection(true) --collect data from condition command, show command to screen</script>
					<command></command>
					<packageName></packageName>
					<regex>^condit$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>condi</name>
					<script>runConditionCollection(true) --collect data from condition command, show command to screen</script>
					<command></command>
					<packageName></packageName>
					<regex>^condi$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>cond</name>
					<script>runConditionCollection(true) --collect data from condition command, show command to screen</script>
					<command></command>
					<packageName></packageName>
					<regex>^cond$</regex>
				</Alias>
			</AliasGroup>
			<Alias isActive="yes" isFolder="no">
				<name>look</name>
				<script>send(matches[2],false)
lookRan = true --tell triggers player has run the look command</script>
				<command></command>
				<packageName></packageName>
				<regex>^(?i)((?:l(?:ook|oo|o)?))\s*$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>skills</name>
				<script>runSkillsCollection(true) --collect data from stats command showing command to screen</script>
				<command></command>
				<packageName></packageName>
				<regex>^(?i)(?:skill(?:s)?)\s*$</regex>
			</Alias>
		</AliasGroup>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>login</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
		</AliasGroup>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>font</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<Alias isActive="yes" isFolder="no">
				<name>font Size</name>
				<script>tecClientSetFontSize(tonumber(matches[2])) 
--matches[2] is the word in () in the pattern</script>
				<command></command>
				<packageName></packageName>
				<regex>^font (\d+)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>font tab #</name>
				<script>tecClientSetTabFontSize(tonumber(matches[2]))
--matches[2] is the word in () in the pattern</script>
				<command></command>
				<packageName></packageName>
				<regex>^font tab (.*)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>font</name>
				<script>pecho([[
The font command is used to change font settings.
Currently you can change the size of the font.
Uses are:
font size, changes the size of the font to the size entered.
IE: font 12, sets the font size to 12.
Current font size: ]]..getTECFont()
.."\nfont tab #, changes the size of window tabs.\n")</script>
				<command></command>
				<packageName></packageName>
				<regex>^font$</regex>
			</Alias>
		</AliasGroup>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>commands</name>
			<script>--[[
commands ground is intended for commands that interact with the game.
Not commands that interact with the client.
Example would be `wait for drover`
]]--</script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<Alias isActive="yes" isFolder="no">
				<name>wait for drover</name>
				<script>if not parthiaGetWaitForDrover() then --if the player is not already waiting for the drover
  parthiaSetWaitForDrover(true, true) --wait for the drover. Uses trigger `Drover Arrives`
else --player is already waiting for drover
  pecho("You are already waiting for the drover.\n")
end --if not parthiaGetWaitForDrover()</script>
				<command></command>
				<packageName></packageName>
				<regex>^wait for drover$</regex>
			</Alias>
		</AliasGroup>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>movement</name>
			<script>--[[
movement alias group captures the many alternate methods of movement. including their shorthand versions

Used for
parthiaMap to detect direction player has moved in.
]]--</script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<Alias isActive="yes" isFolder="no">
				<name>go direction</name>
				<script>--send("go "..matches[2], false)
sendMovement(matches[2], "go ", false) --send "go direction", do not echo send to screen
debugToDisplay("alias go direction, called. Direction "..matches[2])
parthiaMap.detectDirection(matches[2])</script>
				<command></command>
				<packageName></packageName>
				<regex>^(?i)go\s+(.+)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>climb direction</name>
				<script>--send("climb "..matches[2], false)
sendMovement(matches[2], "climb ", false)
debugToDisplay("alias climb direction, called. Direction "..matches[2])
parthiaMap.detectDirection(matches[2])</script>
				<command></command>
				<packageName></packageName>
				<regex>^(?i)cli(?:m|mb)?\s+(.+)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>crawl direction</name>
				<script>--send("climb "..matches[2], false)
sendMovement(matches[2], "crawl ", false)
debugToDisplay("alias climb direction, called. Direction "..matches[2])
parthiaMap.detectDirection(matches[2])</script>
				<command></command>
				<packageName></packageName>
				<regex>^(?i)craw(?:l)?\s+(.+)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>limp direction</name>
				<script>--send("climb "..matches[2], false)
sendMovement(matches[2], "crawl ", false)
debugToDisplay("alias climb direction, called. Direction "..matches[2])
parthiaMap.detectDirection(matches[2])</script>
				<command></command>
				<packageName></packageName>
				<regex>^(?i)limp\s+(.+)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>retreat direction</name>
				<script>--send("retreat "..matches[2], false)
sendMovement(matches[2], "retreat ", false)
debugToDisplay("alias retreat direction, called. Direction: "..matches[2])
parthiaMap.detectDirection(matches[2])</script>
				<command></command>
				<packageName></packageName>
				<regex>^(?i)ret(?:r|re|rea|reat)?\s+(.+)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>walk direction</name>
				<script>--[[
command is only walk. Full word. No shorthand
command will continue to allow the player to walk after it is initially called.
we do not want to collect anything but "walk wordNoMoreSpaces" so we do not capture. Walk to location
]]--
--send("walk "..matches[2], false)
sendMovement(matches[2], "walk ", false)
debugToDisplay("alias walk direction, called. Direction: "..matches[2])
parthiaMap.detectDirection(matches[2])</script>
				<command></command>
				<packageName></packageName>
				<regex>^(?i)walk\s+(\w+)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>movement input</name>
				<script>send(matches[2], false)
--[[
created to resolve an issue where a player attempting to walk in a diaginol direction that does not exist, would trigger the special exit movement.
Do a different direction and echo they were going the direction indicated by the command. This will break the Parthiamap. However this would highjack all movement input.
Rendering input at @ prompts like @ macro useless.
sendMovement(matches[2], "go ", false) 
]]--
mapDebug("alias movement input, called. Direction found: "..matches[2])
parthiaMap.detectDirection(matches[2])</script>
				<command></command>
				<packageName></packageName>
				<regex>^((?i)(?:n(?:orth|ort|or|o)?|ne|e(?:ast|as|a)?|se|s(?:outh|out|ou|o)?|sw|w(?:est|es|e)?|nw|u(?:p)?|d(?:own)?|le(?:ave|av|a)?|1|2|3|4|6|7|8|9(?:\s.+)?))$</regex>
			</Alias>
		</AliasGroup>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>Obstacle Courses</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<Alias isActive="yes" isFolder="no">
				<name>3Part</name>
				<script>if courses.threePart then
  courses.disable(true) --stop the course script, display a message to the player
else
  courses.running = true
  courses.threePart = true
  enableTrigger("Courses 3 Part")
  courses.lookRan = true --prevents the player running the look command from triggering the script.
  send("look")
end --if courses.threePart</script>
				<command></command>
				<packageName></packageName>
				<regex>/3part</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>4Part</name>
				<script>if courses.fourPart then
  courses.disable(true) --stop the course script, display a message to the player
else
  courses.running = true
  courses.fourPart = true
  enableTrigger("Courses 4 Part")
  courses.lookRan = true 
  send("look")
end --if courses.fourPart</script>
				<command></command>
				<packageName></packageName>
				<regex>/4part</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Courses</name>
				<script>pecho("Course Completions:\n")
if courses.Strength   then pecho("Strength: "..courses.Strength.."\n") end
if courses.Speed      then pecho("Speed: " ..courses.Speed.."\n") end
if courses.Perception then pecho("Perception: " ..courses.Perception.."\n") end
if courses.Agi        then pecho("Agility: " ..courses.Agi.."\n") end
if courses.Dex        then pecho("Dexterity: " ..courses.Dex.."\n") end
if courses.End        then pecho("Endurance: " ..courses.End.."\n") end
if courses.Will       then pecho("Willpower: " ..courses.Will.."\n") end</script>
				<command></command>
				<packageName></packageName>
				<regex>^(?i)courses\s*$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Courses Reset</name>
				<script>if courses.Strength then courses.Strength = false end
if courses.Speed then courses.Speed = false end
if courses.Perception then courses.Perception = false end
if courses.Dex then courses.Dex = false end
if courses.Agi then courses.Agi = false end
if courses.End then courses.End = false end
if courses.Will then  courses.Will = false end
pecho("Reset course completions.\n")</script>
				<command></command>
				<packageName></packageName>
				<regex>^(?i)courses reset\s*$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>run course</name>
				<script>courses.running = true
courses.threePart = true
enableTrigger("Courses 3 Part")
courses.lookRan = true --prevents the player running the look command from triggering the script.

courses.fourPart = true
enableTrigger("Courses 4 Part")

send("look")</script>
				<command></command>
				<packageName></packageName>
				<regex>^(?i)run course\s*$</regex>
			</Alias>
		</AliasGroup>
		<Alias isActive="yes" isFolder="no">
			<name>stop</name>
			<script>send("stop")
parthiaStopScripts(true) --stop all automation scripts, display message to screen.</script>
			<command></command>
			<packageName></packageName>
			<regex>^(?i)stop\s*$</regex>
		</Alias>
	</AliasPackage>
	<ActionPackage />
	<ScriptPackage />
	<KeyPackage />
	<HelpPackage>
		<helpURL></helpURL>
	</HelpPackage>
</MudletPackage>
