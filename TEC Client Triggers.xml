<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>GUI Triggers &amp; SKOOTs</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>SKOOT 9</name>
				<script>--unfortunately I have no idea what SKOOT 9 lines are for.
--My GUESS is they are poorly maintaned room numbers?
--SKOOT 9 I hate you! Damn ninja number!

--if debug mode is on display unfiltered line to it.
if getTECDebugMode() then
	debugToDisplay("Unfiltered line: "..line)
end --if Debug Mode is on


--lpeg.P("TestString")

--Delete main's line
--selectCurrentLine() --proper code for when hinsert is fixed.
--replace("")
--deselect()
deleteLine()</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>SKOOT 9</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>2</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>TEC Map Rooms</name>
				<script>--[[
SKOOT 6 lines I am nearly certain are for drawing the 2d map

--SKOOT 6 -10,-10,20,#ff0000,17.1111,-10,10,20,#ffffff,25.5555
--This skoot is from a map that I am certain there are two rooms.
--Both the same size. One higher up is red one directly below is white
--They are the same size.
--There are door open and closed lines on them. Those are handled with skoot 10 messages
--SKOOT 6 x, y, size, color, ?
--x horizonal position of top left corner
--y is vertical position of top left corner
--size is the size of the room 
--color is the color of the room 
--No fucking idea what the fucking number at the end is!

--This is going to be the games largest in drawn pixels and most common skoot message
--SKOOT 6 -40,-40,80,#ff0000,117.624,40,-40,80,#00ff00,117.624,-120,-40,80,#00ff00,117.624,
---40,-120,80,#ffffff,117.624,-40,40,80,#ffffff,117.624,-120,40,80,#ffffff,117.624,
--40,40,80,#ffffff,117.624,40,-120,80,#ffffff,117.624,-120,-120,80,#ffffff,108.576
--Now we need to get room data in %.
--We know that 80 is the max room size for a single room. By observing skoots.
--We know, only because of playing. That these rooms are normally in a 3x3 grid.
--So we know now our draw win is 240x240
--TEC numbers map to a graph, not a window. So their 0 is x120 y120 in our window.
--To get our correct position we have to do xpos + 120. 
--x and y are both -40 / 120. It would be -.33333.
--multiply that by 100 to get the number is a full percent. -33.333
--Now since tec sees x120,y120 as position 0 and the rest of the world sees x0,y0 as zero
--We need to add our number to 50, because 120 is 50% of our total draw size of 240 pixels.
--50 + -33.333 = 16.667. so 16.667% are our x and y positions.
--size is 80 that will be our width and height.
--We need to get what percent 80 is of our overall draw size 240
-- 80 / 240 = .33333. Multiply that by 100, 33.333
--The room is 33.33% of the entire draw window.
--Subtract 1% of that so we have a border between rooms.
--ff0000 is red so the room will be red.
--17.1111 can go fuck itself because I can't figure out what is is.
]]--

--selectCurrentLine("tecMap.back") --proper code for when hinsert is fixed.
--replace("")
--deselect()
echo("tecMap.back","")

--We are about to draw a new map, so hide all the rooms.
--We are not going to bother with setting room sizes and moving moves to off screen
--that are not being used unless we find a need for it.
--Likely hiding rooms will be error free and is obviously nearly
--processor free.
for i = 1, 100 do --We know the room count because we set it in script 2dMap.
 	mapExit[i]:hide() --Hide exits
	mapRoom[i]:hide() --Hide rooms
end --end of hide rooms loop

local lc = 1 --Just a loop counter so we can go through rooms easily.

--Loop through the sckoot message. Looking for a pattern of room data.
--The patterns in () get returned on gmatch. We capture those into variables.
--Those varibles will be used to draw the room.
--Explaining: "(-?%d+),(-?%d+),(%d+),(#%x+),%d+.%d+,?"
--"-?" means there MAY be a -
--"%d+" is a decimal number that CAN be more than one digit long.
--"%x+: is a hexidecimal number that CAN be more than one digit long.
-- ",?" At the very end. There MAY be a , at the end of our pattern or there
--[.%d*]? means there may be a . followed by 0 or more numbers. Like .4555
--may not be. The last number in the skoot message does not have a ,.
--Not looking for that comma in earlier messages might cause future
--pattern searches to fail.
for xpos, ypos, size, tecMapRoomcolor in string.gmatch( line, "(-?%d+),(-?%d+),(%d+),(#%x+),%d+[.%d*]?,?" ) do

  --TEC uses grid logic for their map. xposition is up to 120 +-.
  --240 is the total size of their draw space. What percent is our position in that space.
  -- +.5 just gives us a border.
  xposScaler = ((((tonumber(xpos) + 120) / 240) * 100)) * mapZoom
  yposScaler = ((((tonumber(ypos) + 120) / 240) * 100)) * mapZoom

	--Convert the size of the room to draw into % of its size on the map.
  --size / 240 = decimalNumber like .3333. Multiply decimalNumber by 100, that is your % 
  sizeScaler = tecMapPixelToPercent(size)

	if getTECMapDebugMode() then --if Display Debug Mod is on.
  	debugToDisplay("Map Room "..tostring(lc).." xpos: "..tostring(tonumber(xpos)+120)
		.." xposScaler: "..tostring(xposScaler)
    .." ypos: "..tostring(tonumber(ypos)+120).." yposScaler: "..tostring(yposScaler)
    .." size: "..tostring(size).." sizeScaler: "..tostring(sizeScaler)
    .." color: "..tostring(tecMapRoomcolor))
  	cecho(mapRoom[lc].name,tostring(lc),blue,"c") --put room # on label
	end --end if DisplayDebugMode is true
  	
  mapRoom[lc]:move(tostring(xposScaler).."%", tostring(yposScaler).."%") --Move the room into position.
  mapRoom[lc]:resize(tostring(sizeScaler).."%", tostring(sizeScaler).."%") --Change the rooms size.
	--using style sheets set the shape and color of the room
	if tecMapRoomcolor == "#ff0000" then mapRoom[lc]:setStyleSheet(mapRoomStyleRed)
	elseif tecMapRoomcolor == "#00ff00" then mapRoom[lc]:setStyleSheet(mapRoomStyleGreen)
	else mapRoom[lc]:setStyleSheet(mapRoomStyleWhite) end
	
  mapRoom[lc]:show() --Now show the room.
  lc = lc +1 --Iterate so we can do this again.
end --end gmatch room data search loop

--We want the map zoon level, but not 100 times...
if getTECMapDebugMode() then debugToDisplay("Map Zoom "..tostring(mapZoom)) end

--if debug mode is on display unfiltered line to it.
if getTECDebugMode() then
	debugToDisplay("Unfiltered line: "..line)
end --if Debug Mode is on

--Delete main's line
--selectCurrentLine() --proper code for when hinsert is fixed.
--replace("")
--deselect()
deleteLine()

--[[
in the for loop the string pattern: "(-?%d+),(-?%d+),(%d+),(#%x+),%d+[.%d*]?,?"
Mentioning this because lpeg would be a method for avoiding the use of regex in triggers.
could be replaced with:

local pattern; do
    local comma = lpeg.P(',')
    local digit = lpeg.R('09')
    local hex_char = lpeg.R('09', 'af', 'AF')
    local number = lpeg.P('-') ^ -1 * ((digit ^ 1 * '.' * digit ^ 1) + (digit ^ 1))
    local hex_color = '#' * hex_char * hex_char * hex_char * hex_char * hex_char * hex_char

    pattern = lpeg.C(number) * comma * lpeg.C(number) * comma * lpeg.C(number) * comma * lpeg.C(hex_color) * comma * number * (comma ^ -1 + -1)
end

local function lpeg_gmatch(str, patt)
    patt = lpeg.Ct(patt) * lpeg.Cp()
    local ret, pos = nil, 1

    return function()
        ret, pos = lpeg.match(patt, str, pos)

        if not ret then return nil end
        return unpack(ret)
    end
end

for xpos, ypos, size, color in lpeg_gmatch( line, pattern ) do
    
end
]]--</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>SKOOT 6</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>2</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>TEC map exits</name>
				<script>--SKOOT 10 is Exit position on the map
--[[
SKOOT 10 x y, dir, open?
x is horizontal position, from center of line
y is vertical position, from center of line.
dir is the direction the Exit is facing, normally it is a line so
	"hor" is horizontal, v is vertical
	"ne" is a 45 degree angle going from left to right, so north east on a map...
	"nw" is a 45 degree andle going from right to left. sp north west on a map...
open if the Exit is open. 1 is open 0 is closed.
]]--

--data types that will be used in later loop
local xposScaler = 0 --used to hold postion on map in % rather than pixels
local yposScaler = 0
local iconWidthAdjustment = 0
local iconHeightAdjustment = 0

local lc = 1 --Just a loop counter so we can go through rooms easily.

--look through line for the data pattern to get exit data. Input them into variables.
for xpos, ypos, exitDirection, exitOpen in string.gmatch( line, "(-?%d+),(-?%d+),(%w+),(%d+),?" ) do

	if getTECMapDebugMode() then --if Display Debug Mode is on.
  	debugToDisplay("Map Exit "..tostring(lc).." xpos: "
		..tostring(tonumber(xpos)+120).." xposScaler: "..tostring(xposScaler)
    .." ypos: "..tostring(tonumber(ypos)+120).." yposScaler: "..tostring(yposScaler)
    .." Direction: "..exitDirection
    .." open: "..tostring(exitOpen)
		.."\nExit Icon: Width: "..tecExit[exitDirection].width
		.." Height: "..tecExit[exitDirection].height
    .." Style sheet: "..tecExit[exitDirection][exitOpen].tecExitStyleSheet)
	end --end if DisplayDebugMode is true

	--pulling sizes from the tecExit table resize the label for the icon	
  mapExit[lc]:resize(tecExit[exitDirection].width, tecExit[exitDirection].height)
	--Now set the style sheet for the  
	mapExit[lc]:setStyleSheet(tecExit[exitDirection][exitOpen].tecExitStyleSheet)

	--labels start at x0y0 in mudlet, but TEC is providing a center point for our exit icons
	--convert half the size of the icons for exits into % of the total map window.
	--Than take the overall size of the map window / that by our standard 240 window size.
	--The resulting number is used to adjust the icon position as the map is scaled.
	iconWidthAdjustment = tecMapIconAdjustment(tecExit[exitDirection].width, tecMap.back:get_width())
	
  --TEC uses grid logic for their map. xposition is 120 +-.
  --240 is the total size of their draw space. What percent is our position in that space.
	--halfWidth is used to center
	xposScaler = ((((tonumber(xpos) + 120) / 240) * 100) - iconWidthAdjustment) * mapZoom
	
	--same logic as aboive
	iconHeightAdjustment = tecMapIconAdjustment(tecExit[exitDirection].height, tecMap.back:get_height())
	yposScaler = ((((tonumber(ypos) + 120) / 240) * 100) - iconHeightAdjustment) * mapZoom	
	
	--Move the Exit into position.
  mapExit[lc]:move(tostring(xposScaler).."%", tostring(yposScaler).."%") 
	mapExit[lc]:lower() --Position rooms ontop of exits.
	mapExit[lc]:show() --Now show the exit path.

  lc = lc +1 --Iterate so we can do this again on a new exit.
end --end gmatch room data search loop

tecMap.back:lower() --lower the background behind the exits.

--We want the map zoon level, but not 100 times...
if getTECMapDebugMode() then debugToDisplay("Map Zoom "..tostring(mapZoom)) end

--if debug mode is on display unfiltered line to it.
if getTECDebugMode() then
	debugToDisplay("Unfiltered line: "..line)
end --if Debug Mode is on

--Delete main's line
--selectCurrentLine() --proper code for when hinsert is fixed.
--replace("")
--deselect()
deleteLine()</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>SKOOT 10</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>2</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Compass</name>
				<script>--Because I only need to do this 11 times. I am doing it without
--a loop. Using a find command 11 times would require more processing.
--This could have also been done with string.match
--was fairly certain this required fewer cycles.

--print("\nNorth is: ") --Test the count numbers
--print(string.sub(line, 11, 14)) --Test the count numbers
--north
if  string.sub(line, 11, 14) == "show" then
	compass.lit("n")
else
	compass.unlit("n")
end

--print("\nNorth East is: ") --Test the count numbers
--print(string.sub(line, 19, 22)) --Test the count numbers
--ne
if  string.sub(line, 19, 22) == "show" then
	compass.lit("ne")
else
	compass.unlit("ne")
end

--print("\nEast is: ") --Test the count numbers
--print(string.sub(line, 26, 29)) --Test the count numbers
--e
if  string.sub(line, 26, 29) == "show" then
	compass.lit("e")
else
	compass.unlit("e") 
end

--print("\nSouth East is: ") --Test the count numbers
--print(string.sub(line, 34, 37)) --Test the count numbers
--se
if  string.sub(line, 34, 37) == "show" then
	compass.lit("se")
else
	compass.unlit("se")
end

--print("\nSouth  is: ") --Test the count numbers
--print(string.sub(line, 41, 44)) --Test the count numbers
--s
if  string.sub(line, 41, 44) == "show" then
	compass.lit("s")
else
	compass.unlit("s")
end

--print("\nSouth West  is: ") --Test the count numbers
--print(string.sub(line, 49, 52)) --Test the count numbers
--sw
if  string.sub(line, 49, 52) == "show" then
	compass.lit("sw")
else
	compass.unlit("sw")
end

--print("\nWest  is: ") --Test the count numbers
--print(string.sub(line, 56, 59)) --Test the count numbers
--w
if  string.sub(line, 56, 59) == "show" then
	compass.lit("w")
else
	compass.unlit("w")
end

--print("\nNorth West  is: ") --Test the count numbers
--print(string.sub(line, 64, 67)) --Test the count numbers
--nw
if  string.sub(line, 64, 67) == "show" then
	compass.lit("nw")
else
	compass.unlit("nw")
end

--print("\nUp  is: ") --Test the count numbers
--print(string.sub(line, 71, 74)) --Test the count numbers
--up not supported YET
--if  string.sub(line, 71, 74) == "show" then
--	compass.lit("u")
--else
--	compass.unlit("u")
--end

--print("\nDown  is: ") --Test the count numbers
--print(string.sub(line, 78, 81)) --Test the count numbers
--down not supported YET
--if  string.sub(line, 78, 81) == "show" then
--	compass.lit("d")
--else
--	compass.unlit("d")
--end

--if debug mode is on display unfiltered line to it.
if getTECDebugMode() then
	debugToDisplay("Unfiltered line: "..line)
end --if Debug Mode is on

--Delete main's line
--selectCurrentLine() --proper code for when hinsert is fixed.
--replace("")
--deselect()
deleteLine()</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>SKOOT 7</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>2</integer>
				</regexCodePropertyList>
			</Trigger>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Status Bar</name>
				<script>--SKOOT 8 handles status bars.

--Examples are:
--SKOOT 8 Health,100
--SKOOT 8 Fatigue,100
--SKOOT 8 Encumbrance,87
--SKOOT 8 Satiation,50</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Health bar</name>
					<script>--Pushes SKOOT 8 Health,#
--into the health bar.

--This can be done with a regex trigger () and matches[2].
--We are doing it this way to avoid a regex when it is not needed.
--We want as few regex triggers as is possible. All these triggers 
--are checked on every line the server sends.

	--pull only the numbers at the end into a local variable
	local health = string.gsub(line,"SKOOT 8 Health,","")
	--this probably be converted to string.sub
	--http://lua-users.org/wiki/StringLibraryTutorial
	--https://wiki.mudlet.org/w/Manual:String_Functions#string.sub.2C_utf8.sub
	--local health =  string.sub(line, 16, string.len(line))
	
	hpbar:setValue(tonumber(health),100) --set bar on screen
	--echo("\nYour current health is: ")
	--echo(health)

--if debug mode is on display unfiltered line to it.
if getTECDebugMode() then
	debugToDisplay("Unfiltered line: "..line)
end --if Debug Mode is on

--Delete main's line
--selectCurrentLine() --proper code for when hinsert is fixed.
--replace("")
--deselect()
deleteLine()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>SKOOT 8 Health,</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Fatigue bar</name>
					<script>--Pushes SKOOT 8 Fatigue,#
--into the fatigue bar.

	--pull only the numbers at the end into a local variable
	local fatigue = string.gsub(line,"SKOOT 8 Fatigue,","")

	fatiguebar:setValue(tonumber(fatigue),100) --set bar on screen
	--echo("\nYour current fatigue is: ")
	--echo(fatigue)
	
--if debug mode is on display unfiltered line to it.
if getTECDebugMode() then
	debugToDisplay("Unfiltered line: "..line)
end --if Debug Mode is on
	
--Delete main's line
--selectCurrentLine() --proper code for when hinsert is fixed.
--replace("")
--deselect()
deleteLine()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>SKOOT 8 Fatigue,</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Encumbrance Bar</name>
					<script>--Pushes SKOOT 8 Fatigue,#
--into the fatigue bar.

	--pull only the numbers at the end into a local variable
	local encumbrance = string.gsub(line,"SKOOT 8 Encumbrance,","")

	encumbrancebar:setValue(tonumber(encumbrance),100) --set bar on screen
	--echo("\nYour current encumbrance rate is: ")
	--echo(encumbrance)
	
--if debug mode is on display unfiltered line to it.
if getTECDebugMode() then
	debugToDisplay("Unfiltered line: "..line)
end --if Debug Mode is on
	
--Delete main's line
--selectCurrentLine() --proper code for when hinsert is fixed.
--replace("")
--deselect()
deleteLine()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>SKOOT 8 Encumbrance,</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Hunger bar</name>
					<script>--Pushes SKOOT 8 Fatigue,#
--into the fatigue bar.

	--pull only the numbers at the end into a local variable
	local hunger = string.gsub(line,"SKOOT 8 Satiation,","")

	hungerbar:setValue(tonumber(hunger),100) --set bar on screen
	--echo("\nYour current hunger rate is: ")
	--echo(hunger)
	
--if debug mode is on display unfiltered line to it.
if getTECDebugMode() then
	debugToDisplay("Unfiltered line: "..line)
end --if Debug Mode is on
	
--Delete main's line
--selectCurrentLine() --proper code for when hinsert is fixed.
--replace("")
--deselect()
deleteLine()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>SKOOT 8 Satiation,</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>URL Opener SKOOT 5</name>
				<script>--Had thought SKOOT 5 was for the vote isPrompt
--It is for all URL calls.
--example: SKOOT 5 http://tec.skotos.net:1180/bin/help?$help_commands_command

--debug does not trigger.

--opens the voting window at login
if(line == "SKOOT 5 http://www.topmudsites.com/vote-scarlatc.html ") then
	echo("To help the world know this game exists you could:\n")
	
	cechoLink("&lt;:blue&gt;Vote for TEC on topmudsites.com", 
	[[openUrl("http://www.topmudsites.com/vote-scarlatc.html")]], 
	"Vote for TEC!", true)
	echo("\n")
	
	cechoLink("&lt;:blue&gt;Like us on facebook", 
	[[openUrl("https://www.facebook.com/SkotosTheEternalCity/")]], 
	"Vote for TEC!", true)
	echo("\n")
end --if vote skoot appears. 

--if debug mode is on display unfiltered line to it.
if getTECDebugMode() then
	debugToDisplay("Unfiltered line: "..line)
end --if Debug Mode is on

--Delete main's line
--selectCurrentLine() --proper code for when hinsert is fixed.
--replace("")
--deselect()
deleteLine()</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>SKOOT 5</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>2</integer>
				</regexCodePropertyList>
			</Trigger>
		</TriggerGroup>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Text Filters</name>
			<script>--!!!!!!!!!!!!!!!!!!READ BEFORE CHANGING FILTER CODE!!!!!!!!!!!!!!!!!!!!!
--Needed because TEC does not support GMCP or MSDP
--so TEC outputs health bar, compass and other gui elements
--over text with telnet...

--ORDER OF THESE ITEMS ARE IMPORTANT!!!
--These are intended to be in an order that will allow for
--optimal performance.
--I have placed items that delete the main line first
--This removes the number of color filter triggers that occurs.
--No we are never going to clean code enough to free up for the use of a mapping system.
--Let's try any way!

--so they don't get filtered wasting processor time</script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>delete lines</name>
				<script>--Lines that are not needed. Because we do not use html tags as of yet.
--&lt;pre&gt; would never have a function for us reguardless.
--Delete main's line
--selectCurrentLine() --proper code for when hinsert is fixed.
--replace("")
--deselect()
deletedLine()</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>&lt;hr&gt;</string>
					<string>&lt;/pre&gt;</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>3</integer>
					<integer>3</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Text Filters</name>
				<script>--trigger mean all lines have this trigger occur.
--prel regex allows for triggers with special mudlet functions for text searching
--^means start of line. Nothing after it means line with anything in it

--hreplace Code provided by s/Mud/Game on mudletdiscord. THANK YOU s/Mud/Game!!!!

--Starting with most likely items moving to less likely.
--Fewer processor cycles...
--Removes what is in brackets
--Make filtered line a copy of the main line, removing all &lt;/font&gt; declarations
--string.gsub referece: https://wiki.mudlet.org/w/Manual:String_Functions
--string.gsub('The whole string to modify', 'what to replace in the string', 'what to replace it with')
filteredLine = string.gsub(line, [[&lt;/font&gt;]], "")

--string.gsub referece: https://wiki.mudlet.org/w/Manual:String_Functions
--string.gsub('The whole string to modify', 'what to replace in the string', 'what to replace it with')
--%1 is whatever is inside of the ()
--if you get &lt;font color="#000000 %1 is 000000
--so it's replacing &lt;font color="#000000&gt; with &lt;#000000&gt;
filteredLine = string.gsub(filteredLine, '&lt;font color="#(%x+)"&gt;', '#%1')
--So now all &lt;font color="#hexcolorcode have turned into &lt;#hexcolorcode&gt; in replacement this is a standard format lua can work with.

--if background is dark turn #000000 into #c0c0c0
local redBG, greenBG, blueBG = getBgColor() --get main console background color
if redBG &lt; 75 and greenBG &lt; 75 and blueBG &lt; 75 then --if the background is very dark, use light text
	tecSettings.tecTextColor = "#c0c0c0" --setting to very light text. This should probably be a default variable
	filteredLine = string.gsub(filteredLine, "#000000", tecSettings.tecTextColor) --turn all black text declarations into tecTextColor
end
--It could also be possible just to invert the color numbers.
--That would be a VERY high contrast line. Would likely create 
--eye strain

--Replaces what is in brackets with what is in quotes
filteredLine = string.gsub(filteredLine, [[&amp;lt;]], "&lt;")
filteredLine = string.gsub(filteredLine, [[&amp;gt;]], "&gt;")
filteredLine = string.gsub(filteredLine, [[&amp;quot;]], "\"")
filteredLine = string.gsub(filteredLine, [[&amp;amp;]], "&amp;")


--text below will entirely remove the code in the brackets
--For these items we may want to create formating rules.
--Though more likely much easier would be to replace the
--commands that uses these with alias. Read in the lines 
--than format with ftext
filteredLine = string.gsub(filteredLine, [[&lt;hr&gt;]], "")
filteredLine = string.gsub(filteredLine, [[&lt;/pre&gt;]], "")
filteredLine = string.gsub(filteredLine, [[&lt;pre&gt;]], "")
filteredLine = string.gsub(filteredLine, [[&lt;b&gt;]], "")
filteredLine = string.gsub(filteredLine, [[&lt;/b&gt;]], "")

--Removing &lt;font size=+1&gt;
--The double operators appear to cause issues.
--%p is puncuation. No + after because we know there is only one punctuation to wild after =
--So now instead of double operators we have an operator and
--a single wild declaration that must be a puncuation. So + in this case.
filteredLine = string.gsub(filteredLine, [[&lt;font size=%p1&gt;]], "")

--There should be code here to see if the line now has no viewable text.
--Not nil or wild, because it may be nothing but spaces. Spaces are something.
--it should include encapsulate the add default color code if below

--if the line does not have a color code in it.
--insert the default color code at the start 
--# is what all the color codes start with
--%x means hexadecimal number 
--+ means multiple, in this case hexadecimal numbers
if "#%x+" ~= string.match(filteredLine, "#%x+") then
	filteredLine = tecSettings.tecTextColor..filteredLine --Add current text color to the start of the line
end

--center filter
--center lines with &lt;center&gt;
--center with ftext

selectCurrentLine() --Selects main. 
--hreplace is in scripts under mudlet communicty functions.
--Though in short it uses hinserttext to push text with colors to a window...
hreplace(filteredLine)		
deselect()

--displays unfiltered line to screen.
--display with setTECDebugMode(true)
--or command line: debug on
debugToDisplay("Unfiltered line: "..line)
</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
		</TriggerGroup>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>communications</name>
			<script>--&lt;/font&gt;&lt;font color="#0020ff"&gt;&amp;lt;Avidia thinks aloud: Client, if you will, come to Ylsa's?&amp;gt;&lt;/font&gt;
--&lt;/font&gt;&lt;font color="#0020ff"&gt;&amp;lt;Arteus thinks aloud: Yep.&amp;gt;&lt;/font&gt;
--&lt;/font&gt;&lt;font color="#0020ff"&gt;&amp;lt;Aoden thinks aloud: We have found all the secrets. No cliffs.&amp;gt;&lt;/font&gt;
--Piqolo wakes up.&lt;/font&gt;</script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Thoughts</name>
				<script>--trigger is for how think declarations appear in the main line.
--Not for how it appears in filteredLine
--The third item that appears nearly identical to the first is needed for patricians.
--Their first and last names appear in thoughts and speech.

--This trigger puts thoughts to the  communicationsAll window 
--and to thoughts window.


--https://wiki.mudlet.org/w/Manual:UI_Functions#hecho
--Echo to Communication window, coloring hex colors
hecho("Communication", filteredLine.."\n")

--Echo to Thoughts Window, coloring hex showColors
hecho("Thoughts", filteredLine.."\n")

--[[ Don't use the technique below
it will cause filters to fail for a short time when too many
triggers occuring in succession.

selectCurrentLine() --Selects ENTIRE line including line breaks.
copy() --Copies CURRENT selection to clipboard
appendBuffer("Communication") --paste copied text to miniConsole
selectCurrentLine() --Selects ENTIRE line including line breaks.
copy() --Copies CURRENT selection to clipboard
appendBuffer("Thoughts") --paste copied text to miniConsole
]]--</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^&lt;/font&gt;&lt;font color="#(\w+)"&gt;&amp;lt;(\w+) thinks aloud:</string>
					<string>&amp;lt;You think aloud: </string>
					<string>^&lt;/font&gt;&lt;font color="#(\w+)"&gt;&amp;lt;(\w+) (\w+) thinks aloud:</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
					<integer>2</integer>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>speech</name>
				<script>--This trigger puts speech to the communicationsAll window 
--and to speech window.

--If over triggering becomes a concern
--trigger start of line [[You say, &amp;quot;]]
--prel regex [[^(\w+) says, &amp;quot;]]

--https://wiki.mudlet.org/w/Manual:UI_Functions#hecho
--Echo to Communication window, coloring hex colors
hecho("Communication", filteredLine.."\n")

--https://wiki.mudlet.org/w/Manual:UI_Functions#hecho
--Echo to Communication window, coloring hex colors
hecho("Speech", filteredLine.."\n")

--This method sometimes kills filtering don't use it
--selectCurrentLine() --Selects ENTIRE line including line breaks.
--copy() --Copies CURRENT selection to clipboard
--appendBuffer("Communication")
--Keeping it as a  reminder that sometimes, my code sucks!
</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>, &amp;quot;</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>0</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Rumors</name>
				<script>--set bool to yes
--input line to CommunicationsAll &amp; rumor bar</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>&lt;/font&gt;&lt;font color="#e119e1"&gt;A rumor is circulating around:&lt;/font&gt;</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>3</integer>
				</regexCodePropertyList>
			</Trigger>
		</TriggerGroup>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Login</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Login</name>
				<script>--This trigger handles the handshake for the user.
--This WILL fail if the developers stop having a blank space
--after the login it is not [[login]] it is [[login ]]
send("SKOTOS Zealous 0.7.12.2") --sending the zealous handshake

--The login control continues in TEC CLient Triggers - login - Secret Triger</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>Login: </string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>3</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>SECRET Triger</name>
				<script>--The system has passed us SECRET NONE after we have provided the handshake.
--This only works because this is the only time the system passes us SECRET NONE.
--Now we need to get the USER ID from the user.
--We could put anything in the command line. Like User: 
--"USER " just happens to be easy for now...

echo("\nLeaving the word LOGIN in the command line, enter your username and password separated by a whitespace.\n")
printCmdLine("LOGIN ")

--Login control continues in Aliases - TECCommandLineReplacement - USERLogin</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>SECRET NONE</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>3</integer>
				</regexCodePropertyList>
			</Trigger>
		</TriggerGroup>
	</TriggerPackage>
	<TimerPackage />
	<AliasPackage />
	<ActionPackage />
	<ScriptPackage />
	<KeyPackage />
	<HelpPackage>
		<helpURL></helpURL>
	</HelpPackage>
</MudletPackage>
